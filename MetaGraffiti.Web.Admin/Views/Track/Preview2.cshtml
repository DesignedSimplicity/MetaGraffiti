@using MetaGraffiti.Web.Admin.Models;
@model TrackViewModel2

@Html.Partial("_Nav")

@{
	var track = Model.SelectedTrack.TopoTrack;
}

<script>
	var _marker = null;
	var _track = @JsonHelper.GetJson(track);

	$(document).ready(function () {
		initMap();
		loadTrack();

		$(".js-mappable-row").hover(function () {
			if (_marker != null) _marker.setMap(null);

			var index = $(this).index();
			var point = _track.points[index];
			_marker = markPoint(point.lat, point.lng, point.id);
		});

		$(".js-mappable-row").click(function () {
			var index = $(this).index();
			var point = _track.points[index];
			gotoPoint(point.lat, point.lng);
		});
	});

	function loadTrack() {
		var points = _track.points;
		var last = points.length - 1;

		showTrack(points);
		markStart(points[0].lat, points[0].lng);
		markFinish(points[last].lat, points[last].lng);
	}
</script>

<div id="map-container">
	<div id="map">
	</div>
</div>

<div class="row">
	<div class="col-sm-6">
		<div class="row">
			<div class="col-sm-6">
				<div class="h3">
					<span class="badge badge-pill badge-secondary">
						@track.Points.Count points
					</span>
					<span class="badge badge-pill badge-success">
						@track.Stats.EstimatedKM.ToString("#,##0.0") km
					</span>
					<span class="badge badge-pill badge-info">
						@TextHelper.GetElapsedTime(track.Stats.ElapsedTime)
					</span>
				</div>
			</div>
			<div class="col-sm-6 text-right">
				<form method="post" action="/track/extract2/">
					<input type="hidden" name="Source" value="@track.Source" />
					<div class="form-group">
						<div class="input-group">
							<input type="text" class="form-control" name="Name" value="@track.Name">
							<div class="input-group-append">
								<button type="submit" class="btn btn-success">Extract</button>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
		<hr />
		<div class="row">
			<div class="col-sm-2 h3">Start:</div>
			<div class="col-sm-8 h3">
				@if (track.StartPlace != null)
			{
				<a href="@CartoViewModel.GetEditUrl(track.StartPlace.Key)">
					@track.StartPlace.Name
				</a>
		}
			</div>
			<div class="col-sm-2 text-right">
				<a class="btn btn-sm btn-outline-primary" href="@PlaceViewModel.GetSearchUrl(track.StartPoint)">Lookup</a>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-2 h3">End:</div>
			<div class="col-sm-8 h3">
				@if (track.FinishPlace != null)
			{
				<a href="@CartoViewModel.GetEditUrl(track.FinishPlace.Key)">@track.FinishPlace.Name</a>
		}
			</div>
			<div class="col-sm-2 text-right">
				<a class="btn btn-sm btn-outline-primary" href="@PlaceViewModel.GetSearchUrl(track.FinishPoint)">Lookup</a>
			</div>
		</div>
		<div class="row h4">
			<div class="col-sm-2">
				Nearby:
			</div>
			<div class="col-sm-10">
				@foreach (var place in Model.SelectedTrack.NearbyPlaces)
			{
				<a href="@CartoViewModel.GetEditUrl(place.Key)">@place.Name</a>
				<span class="h6">
					<span class="badge badge-pill badge-secondary">@place.Bounds.Area.ToString("0.0")</span>
				</span>
				<span>&nbsp;</span>
		}
			</div>
		</div><div class="row h4">
			<div class="col-sm-2">
				Contains:
			</div>
			<div class="col-sm-10">
				@foreach (var place in Model.SelectedTrack.ContainedPlaces)
			{
				<a href="@CartoViewModel.GetEditUrl(place.Key)">@place.Name</a>
				<span class="h6">
					<span class="badge badge-pill badge-secondary">@place.Bounds.Area.ToString("0.0")</span>
				</span>
				<span>&nbsp;</span>
		}
			</div>
		</div>
		<hr />
		<div class="row h5">
			<div class="col-sm-2">Source:</div>
			<div class="col-sm-10">
				<a href="@OrthoViewModel.GetTracksUrl(Model.GetSourceDirectory(track.Source))">@track.Source</a>
			</div>
		</div>
		<div class="row h5">
			<div class="col-sm-2">Country:</div>
			<div class="col-sm-10">
				<a href="@TopoViewModel.GetCountryUrl(track.Trail.Country)">@track.Trail.Country.Name</a>
			</div>
		</div>
		<div class="row h5">
			<div class="col-sm-2">Timezone:</div>
			<div class="col-sm-10">
				@track.Trail.Timezone.Name
			</div>
		</div>
		<br />
		<table class="table table-sm table-striped table-bordered small">
			<thead>
				<tr class="thead-dark">
					<th>Point #</th>
					<th>Timestamp</th>
					<th>Lat / Long</th>
					<th>Elevation</th>
					<th>Course</th>
					<th>M/S</th>
					<th>GPS</th>
					<th>HDOP</th>
					<th>VDOP</th>
					<th>PDOP</th>
				</tr>
			</thead>
			<tbody>
				@{
				var index = 0;
				foreach (var p in track.Points)
				{
					<tr class="js-mappable-row">
						<td>@(index + 1)</td>
						<td>
							@p.Timestamp.Value.ToString("yyyy-MM-dd") @p.Timestamp.Value.ToString("hh:mm:ss tt")
						</td>
						<td>@p.Latitude.ToString("0.000000"), @p.Longitude.ToString("0.000000")</td>
						<td class="text-center">@((p.Elevation ?? 0).ToString("#,##0"))</td>
						<td class="text-center">@((p.Course ?? 0).ToString("##0"))</td>
						<td class="text-center table-@CssHelper.GetGpxSpeedCss(p.Speed)">@((p.Speed ?? 0).ToString("#,##0.0"))</td>
						<td class="text-center table-@CssHelper.GetGpxSatsCss(p.Sats)">@p.Sats</td>
						<td class="text-center table-@CssHelper.GetGpxDOPCss(p.HDOP)">@p.HDOP</td>
						<td class="text-center table-@CssHelper.GetGpxDOPCss(p.VDOP)">@p.VDOP</td>
						<td class="text-center table-@CssHelper.GetGpxDOPCss(p.PDOP)">@p.PDOP</td>
					</tr>
				index++;
			}
				}
			</tbody>
		</table>
	</div>
</div>
