@using MetaGraffiti.Web.Admin.Models;
@model TrackViewModel

@Html.Partial("_Nav")

@{
	var extract = Model.SelectedExtract;
}

<script>
	var _marker = null;
	var _track = @Model.GetExtractJson();

	$(document).ready(function () {
		initMap();
		loadTrack();

		$(".js-mappable-row").hover(function () {
			if (_marker != null) _marker.setMap(null);

			var index = $(this).index();
			var point = _track.points[index];
			_marker = markPoint(point.lat, point.lng, point.id);
		});

		$(".js-mappable-row").click(function () {
			var index = $(this).index();
			var point = _track.points[index];
			gotoPoint(point.lat, point.lng);
		});
	});

	function loadTrack() {
		var points = _track.points;
		var last = points.length - 1;

		showTrack(points);
		markStart(points[0].lat, points[0].lng);
		markFinish(points[last].lat, points[last].lng);
	}
</script>

<div id="map-container">
	<div id="map">
	</div>
</div>

<div class="row">
	<div class="col-sm-6">
		<div class="row">
			<div class="col-sm-6">
				<form method="post" action="@TrackViewModel.GetExtractUrl()">
					<input type="hidden" name="Uri" value="@extract.SourceUri" />
					<input type="hidden" name="StartTimestamp" value="@Model.SelectedStart" />
					<input type="hidden" name="FinishTimestamp" value="@Model.SelectedFinish" />
					<div class="form-group">
						<div class="input-group">
							<input type="text" class="form-control" name="Name" value="@extract.Name">
							<div class="input-group-append">
								<button type="submit" class="btn btn-primary">Extract Track</button>
							</div>
						</div>
					</div>
				</form>

				<a href="@TrackViewModel.GetPreviewUrl(extract.SourceUri)" class="btn btn-warning">Reset</a>
			</div>
			<div class="col-sm-6">
				<div class="h4">
					<span class="badge badge-secondary">
						@extract.Points.Count points
					</span>
					<span class="badge badge-success">
						@Model.TotalDistance(extract).ToString("#,##0.0") km
					</span>
					<span class="badge badge-info">
						@Model.ElapsedTime(extract)
					</span>
				</div>
			</div>
		</div>
		<hr />
		<div class="row">
			<div class="col-sm-2 h3">Start:</div>
			<div class="col-sm-8 h3">
				@if (Model.SelectedSource.StartPlace != null)
				{
					<a href="@CartoViewModel.GetEditUrl(Model.SelectedSource.StartPlace.Key)">
						@Model.SelectedSource.StartPlace.Name
					</a>
				}
			</div>
			<div class="col-sm-2 text-right">
				<a class="btn btn-sm btn-outline-info" href="@PlaceViewModel.GetSearchUrl(extract.Points.First())">Lookup</a>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-2 h3">End:</div>
			<div class="col-sm-8 h3">
				@if (Model.SelectedSource.FinishPlace != null)
				{
					<a href="@CartoViewModel.GetEditUrl(Model.SelectedSource.FinishPlace.Key)">@Model.SelectedSource.FinishPlace.Name</a>
				}
			</div>
			<div class="col-sm-2 text-right">
				<a class="btn btn-sm btn-outline-info" href="@PlaceViewModel.GetSearchUrl(extract.Points.Last())">Lookup</a>
			</div>
		</div>

		<div class="row h4">
			<div class="col-sm-2">
				Within:
			</div>
			<div class="col-sm-10">
				@foreach (var place in Model.SelectedSource.Places)
				{
					<a href="@CartoViewModel.GetEditUrl(place.Key)">@place.Name</a>
					<span class="h6">
						<span class="badge badge-pill badge-secondary">@place.Bounds.Area.ToString("0.0")</span>
					</span>
					<span>&nbsp;</span>
				}
			</div>
		</div><div class="row h5">
			<div class="col-sm-2">
				Contains:
			</div>
			<div class="col-sm-10">
				@foreach (var place in Model.SelectedSource.NearbyPlaces)
	{
			<a href="@CartoViewModel.GetEditUrl(place.Key)">@place.Name</a>
			<span class="h6">
				<span class="badge badge-pill badge-secondary">@place.Bounds.Area.ToString("0.0")</span>
			</span>
			<span>&nbsp;</span>
}
			</div>
		</div>
		<hr />
		<div class="row h6">
			<div class="col-sm-2">Source:</div>
			<div class="col-sm-10">
				<a href="@TrackViewModel.GetBrowseUrl(Model.SelectedDirectory.FullName)">@Model.SelectedDirectory.FullName</a>
			</div>
		</div>
		<hr />
		<table class="table table-sm table-striped table-bordered small">
			<thead>
				<tr class="thead-dark">
					<th>Point #</th>
					<th>Timestamp</th>
					<th>Lat / Long</th>
					<th>Elevation</th>
					<th>Course</th>
					<th>M/S</th>
					<th>GPS</th>
					<th>HDOP</th>
					<th>VDOP</th>
					<th>PDOP</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@{
					var index = 0;
					foreach (var p in extract.Points)
					{
						<tr class="js-mappable-row">
							<td>@(index + 1)</td>
							<td>
								@p.Timestamp.Value.ToString("yyyy-MM-dd") @p.Timestamp.Value.ToString("hh:mm:ss tt")
							</td>
							<td>@p.Latitude.ToString("0.000000"), @p.Longitude.ToString("0.000000")</td>
							<td class="text-center">@((p.Elevation ?? 0).ToString("#,##0"))</td>
							<td class="text-center">@((p.Course ?? 0).ToString("##0"))</td>
							<td class="text-center table-@Model.GetSpeedCss(p.Speed)">@((p.Speed ?? 0).ToString("#,##0.0"))</td>
							<td class="text-center table-@Model.GetSatsCss(p.Sats)">@p.Sats</td>
							<td class="text-center table-@Model.GetDOPCss(p.HDOP)">@p.HDOP</td>
							<td class="text-center table-@Model.GetDOPCss(p.VDOP)">@p.VDOP</td>
							<td class="text-center table-@Model.GetDOPCss(p.PDOP)">@p.PDOP</td>
							<td class="h6">
								<a href="@TrackViewModel.GetPreviewUrl(extract.SourceUri, p.Timestamp, Model.SelectedFinish)" class="badge badge-success">Start</a>
								<a href="@TrackViewModel.GetPreviewUrl(extract.SourceUri, Model.SelectedStart, p.Timestamp)" class="badge badge-danger">Finish</a>
								<a href="@PlaceViewModel.GetSearchUrl(p)" class="badge badge-info">Lookup</a>
							</td>
						</tr>
						index++;
					}
				}
			</tbody>
		</table>
	</div>
</div>
