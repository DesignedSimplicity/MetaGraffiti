@using MetaGraffiti.Web.Admin.Models;
@model TrackViewModel

@Html.Partial("_Nav")

@{ 
	var trackGroup = Model.TrackGroup;
}

<script>
	var _tracks = @Model.GetTrackJson();
	var _bounds = null;
	var _start = null;
	var _stop = null;

	$(document).ready(function () {
		initDirty();

		initMap();

		_bounds = new google.maps.LatLngBounds();
		for (index = 0; index < _tracks.length; index++) {
			var color = getMapColor(index);
			showTrack(_tracks[index].points, color);
			$("table > tbody > tr").eq(index).children().eq(0).css('background-color', color);

			var points = _tracks[index].points;
			for (var i = 0; i < points.length; i++) {
				_bounds.extend(new google.maps.LatLng(points[i].lat, points[i].lng));
			}
		}
		if (_tracks.length > 0) {
			_mapGoogle.fitBounds(_bounds);
		}

		$(".js-track-row").hover(function () {
			var index = $(this).index();

			var points = _tracks[index].points;
			var last = points.length - 1;

			if (_start != null) _start.setMap(null);
			_start = markStart(points[0].lat, points[0].lng);

			if (_stop != null) _stop.setMap(null);
			_stop = markFinish(points[last].lat, points[last].lng);
		});

		$(".js-track-row").click(function () {
			var index = $(this).index();

			var points = _tracks[index].points;
			var bounds = new google.maps.LatLngBounds();
			for (var i = 0; i < points.length; i++) {
				bounds.extend(new google.maps.LatLng(points[i].lat, points[i].lng));
			}
			_mapGoogle.fitBounds(bounds);
		});

		$(".js-reset-view").click(function () {
			if (_tracks.length > 0) _mapGoogle.fitBounds(_bounds);
		});


		$("#CountryField, #RegionField, #LocationField, #TimezoneField").change(function () {
			$(this).removeClass("is-valid").removeClass("is-invalid");
			$(this).addClass("is-invalid");
		});

		$("#LocationField").click(function () {
			var text = $(this).val();
			if (text.length == 0) {
				lookupLocation();
			} else {

			}
		});

		$("#lookupTimezone").click(function () {
			var field = $("#TimezoneField");
			var text = field.val();
			if (text.length == 0) {
				geocodeTimezone();
			} else {
				lookupTimezone(text);
			}
		});

		function updateTimezone(name) {
			var field = $("#TimezoneField");
			if (name.length > 0) {
				field.val(name);
				field.removeClass("is-invalid");
				field.addClass("is-valid");
			} else {
				field.addClass("is-invalid");
			}
		}

		function geocodeTimezone() {
			var center = _bounds.getCenter();
			$.getJSON('/api/timezones/point/?lat=' + center.lat() + "&lng=" + center.lng())
				.done(function (data) {
					updateTimezone(data.tzid);
				})
				.fail(function (jqXHR, textStatus, err) {
					updateTimezone('');
				});
		}

		function lookupTimezone(name) {
			$.getJSON('/api/timezones/?id=' + name)
				.done(function (data) {
					updateTimezone(data.tzid);
				})
				.fail(function (jqXHR, textStatus, err) {
					updateTimezone('');
				});
		}

		function lookupLocation() {

		}
	});
</script>

<div id="map-container">
	<div id="map">
	</div>
</div>

<div class="row">
	<div class="col-sm-6">
		@if (Model.HasConfirmation)
		{
			<div class="alert alert-success">@Model.ConfirmMessage</div>
		}
		<table class="table table-striped table-hover table-b">
			<thead class="thead-dark">
				<tr>
					<th class="text-center">#</th>
					<th class="w-50">Track</th>
					<th>KM</th>
					<th>Time</th>
					<th>Start</th>
					<th>Finish</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@{
					var count = 0;
					foreach (var track in Model.TrackExtracts)
					{
						<tr class="js-track-row">
							<td class="text-center">@(++count)</td>
							<td>
								<div class="font-weight-bold">@track.Name</div>
								<div class="small">@track.Description</div>
							</td>
							<td>@Model.TotalDistance(track).ToString("#,##0.0")</td>
							<td class="text-nowrap">@Model.ElapsedTime(track)</td>
							<td class="text-nowrap">@Model.StartTime(track).ToString("yyyy-MM-dd")<br />@Model.StartTime(track).ToString("hh:mm:ss tt")</td>
							<td class="text-nowrap">@Model.FinishTime(track).ToString("yyyy-MM-dd")<br />@Model.FinishTime(track).ToString("hh:mm:ss tt")</td>
							<td class="text-nowrap">
								<a class="btn btn-sm btn-primary" href="@TrackViewModel.GetEditUrl(track.ID)">Edit</a>
								<a class="btn btn-sm btn-outline-info" href="@TrackViewModel.GetPreviewUrl(track.SourceUri)">Source</a>
								<a class="btn btn-sm btn-outline-danger js-confirm" href="@TrackViewModel.GetDeleteUrl(track.ID)">Remove</a>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
		<hr />
		<form method="post" action="@TrackViewModel.GetUpdateUrl()">
			<div class="row">
				<div class="col">
					<div class="form-group">
						<label for="Name">Name</label>
						<input type="text" class="form-control" name="Name" value="@trackGroup.Name">
					</div>
				</div>
				<div class="col">
					<label for="Timezone">Timezone</label>
					<div class="input-group">
						<input type="text" class="form-control @(Model.IsTimezoneValid ? "is-valid" : "is-invalid")" name="Timezone" id="TimezoneField" value="@(Model.TrackGroup.Timezone?.Name ?? "")">
						<div class="input-group-append">
							<a href="#" class="btn btn-outline-secondary" id="lookupTimezone">Lookup</a>
						</div>
					</div>
				</div>
			</div>
			<div class="form-group">
				<label for="Description">Description</label>
				<textarea class="form-control" rows="3" name="Description">@trackGroup.Description</textarea>
			</div>
			<div class="form-group">
				<label for="Keywords">Keywords</label>
				<input type="text" class="form-control" name="Keywords" value="@trackGroup.Keywords">
			</div>
			<!--
			<div class="form-group">
				<label for="Url">Website</label>
				<div class="input-group">
					<input type="text" class="form-control" name="Url" placeholder="http://" value="@trackGroup.Url">
					<input type="text" class="form-control" name="UrlName" value="@trackGroup.UrlName" />
				</div>
			</div>
			-->
			<div class="form-group">
				<label for="Country">Location</label>
				<div class="input-group">
					<input type="text" class="form-control @(Model.IsCountryValid ? " is-valid" : "is-invalid" )" name="Country" id="CountryField" placeholder="Country" value="@(Model.TrackGroup.Country?.Name ?? "")">
					@if (Model.IsCountryValid && Model.TrackGroup.Country.HasRegions)
					{
						<input type="text" class="form-control @(Model.IsRegionValid ? " is-valid" : "is-invalid" )" name="Region" id="RegionField" placeholder="Region" value="@(Model.TrackGroup.Region?.RegionName ?? "")">
					}
					<input type="text" class="form-control" name="Location" id="LocationField" placeholder="Location" value="@trackGroup.Location">
					<div class="input-group-append">
						<a href="#" class="btn btn-outline-secondary" id="lookupCountry">Lookup</a>
					</div>
				</div>
			</div>
			<br />
			<div class="row">
				<div class="col-sm-8">
					<button type="submit" class="btn btn-success">Update</button>
					<a href="@TrailViewModel.GetImportUrl()" class="btn btn-outline-primary js-check-dirty">Import</a>
					<a href="@TrackViewModel.GetExportUrl()" class="btn btn-outline-info js-check-dirty">Export GPX</a>
					<a href="@TrackViewModel.GetExportUrl("kml")" class="btn btn-outline-info js-check-dirty">Export KML</a>
				</div>
				<div class="col-sm-4 text-right">
					<button type="button" class="btn btn-outline-secondary js-reset-view">Zoom All</button>
					<a href="@TrackViewModel.GetResetUrl()" class="btn btn-danger js-confirm">Remove All</a>
				</div>
			</div>
		</form>
	</div>
</div>
<br />